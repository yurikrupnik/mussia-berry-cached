import { TasksRunner } from './tasks-runner';
import type { NxJsonConfiguration, ProjectGraph, ProjectGraphProjectNode, TargetDependencyConfig, Task } from '@nrwl/devkit';
import { Environment } from '../core/shared-interfaces';
import { NxArgs } from '../command-line/utils';
export declare function runCommand(projectsToRun: ProjectGraphProjectNode[], projectGraph: ProjectGraph, { nxJson }: Environment, nxArgs: NxArgs, overrides: any, terminalOutputStrategy: 'default' | 'hide-cached-output' | 'run-one', initiatingProject: string | null): Promise<void>;
interface TaskParams {
    project: ProjectGraphProjectNode;
    target: string;
    configuration: string;
    overrides: Object;
    errorIfCannotFindConfiguration: boolean;
}
export declare function createTasksForProjectToRun(projectsToRun: ProjectGraphProjectNode[], params: Omit<TaskParams, 'project' | 'errorIfCannotFindConfiguration'>, projectGraph: ProjectGraph, initiatingProject: string | null, defaultDependencyConfigs?: Record<string, TargetDependencyConfig[]>): Task[];
export declare function createTask({ project, target, configuration, overrides, errorIfCannotFindConfiguration, }: TaskParams): Task;
export declare function getRunner(nxArgs: NxArgs, nxJson: NxJsonConfiguration): {
    tasksRunner: TasksRunner;
    runnerOptions: any;
};
export {};
